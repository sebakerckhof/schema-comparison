const { superstruct } = require('superstruct');
const kindOf = require('kind-of');


const {
  recordingState,
  status,
  audioSinkRole,
  audioSourceRole,
  usbCameraSettingType,
  cameraRole,
  moderationPolicy,
  deviceRole,
  roomRole,
  displayRole,
} = require('./constants');


const allRoles = [
  ...Object.values(audioSinkRole),
  ...Object.values(audioSourceRole),
  ...Object.values(cameraRole),
  ...Object.values(roomRole),
  ...Object.values(displayRole),
  ...Object.values(usbCameraSettingType)
]

const dnsRe = new RegExp('^[a-zA-Z0-9-._]*$');

const struct = superstruct({
  types: {
    dns: value => dnsRe.test(value),
    oneOf: value => {
      return allRoles.includes(value)
    },
    maxString: value => kindOf(value) === 'string' && value.length < 2560,
  }
})


const proxySchema = ({
  url: 'maxString',
  user: 'maxString?',
  password: 'maxString?',
});

const hierarchySchema = ({
  _metadata: {
    master: 'maxString?',
    isMaster: 'boolean'
  },
});

const wallpaperCacheSchema = struct({
  ...hierarchySchema,
  _id: 'maxString?',
  role: 'string?',
})

const displayModeSchema = struct({
  width: 'number',
  height: 'number',
  rate: 'number',
  native: 'boolean?',
});

const displayBaseSchema = {
  id: 'maxString',
  port: 'maxString',
  x: 'number?',
  y: 'number?',
  activeMode: displayModeSchema,
};

const displaySchema = struct({
  ...displayBaseSchema,
  vendor: 'string?',
  model: 'string?',
  productCode: 'number?',
  serial: 'number?',
  modes: [displayModeSchema]
})

const displayConfigSchema = struct({
  ...displayBaseSchema,
  role: 'oneOf',
  extends: 'maxString?',
  parameters: 'object',
  isTouchScreen: 'boolean?',
  title: 'maxString?',
  isAutoGeneratedTitle: 'boolean?',
})


const usbCameraSettingSchema = struct({
  id: 'number',
  name: 'maxString',
  type: 'oneOf',
  min: 'number',
  max: 'number',
  default: 'number',
  current: 'number',
  step: 'number',
  menu: ['maxString']
});

const framerateSchema = struct({
  numerator: 'number',
  denominator: 'number',
});

const resolutionSchema = {
  width: 'number',
  height: 'number',
};

const usbCameraResolutionSchema = struct({
  ...resolutionSchema,
  framerates: [framerateSchema]
})

const formatSchema = {
  id: 'number',
  name: 'maxString'
};

const usbCameraFormatSchema = struct({
  ...formatSchema,
  resolutions: [usbCameraResolutionSchema]
})

const usbCameraBaseSchema = {
  id: 'maxString',
  port: 'number?',
  device: 'maxString?',
  serial: 'maxString?',
  vendor: 'maxString?',
  model: 'maxString?',
  activeFormat: struct(formatSchema),
  activeResolution: struct(resolutionSchema),
  activeFramerate: framerateSchema
};

const usbCameraSchema = struct({
  ...usbCameraBaseSchema,
  settings: [usbCameraSettingSchema],
  formats: [usbCameraFormatSchema]
})


const usbCameraConfigSchema = struct({
  ...usbCameraBaseSchema,
  title: 'maxString?',
  isAutoGeneratedTitle: 'boolean?',
  role: 'oneOf?',
  audioDevice: 'string?',
  stream: 'boolean?',
  useLocally: 'boolean?',
})

const audioPortSchema = struct({
  id: 'maxString',
  title: 'maxString',
  available: 'number?',
});

const audioSourceBaseSchema = {
  id: 'maxString',
  device: 'maxString?',
  serial: 'maxString?',
  activePort: audioPortSchema,
};

const audioSourceSchema = struct({
  ...audioSourceBaseSchema,
  ports: [audioPortSchema]
});

const audioSourceConfigSchema = struct({
  ...audioSourceBaseSchema,
  title: 'string?',
  role: 'oneOf?'
})

const audioSinkBaseSchema = {
  id: 'string',
  device: 'string?',
  activePort: audioPortSchema,
};

const audioSinkSchema = struct({
  ...audioSinkBaseSchema,
  ports: [audioPortSchema],
});

const audioSinkConfigSchema = struct({
  ...audioSinkBaseSchema,
  title: 'string?',
  role: 'oneOf?'
})


// AUDIO
const audioPropertiesSchema = struct({
  mute: 'boolean',
  volume: 'number?'
});

const displayNodeDeviceState = {
  state: 'maxString?',
  byodCompositionId: 'string?',
  byodEnabled: 'boolean?',
  moderated: 'boolean?',
  moderationPolicy: 'number?',
  audio: audioPropertiesSchema,
  recording: 'number?',
}


const displayNodeDeviceSchema = struct({
  title: 'string?',
  type: 'string',
  model: 'string?',
  instituteId: 'string?',
  locationId: 'string?',
  locations: ['string'],
  meetingId: 'string?',
  activeConfigurationId: 'maxString?',
  configured: 'boolean',
  role: 'maxString?',
  parameters: 'object',
  publicIp: 'maxString?',
  privateIp: 'maxString?',
  hostname: 'maxString?',
  mac: 'maxString?',
  dns: 'dns',
  proxy: struct({...hierarchySchema, ...proxySchema}),
  ...displayNodeDeviceState,
  states: [struct(displayNodeDeviceState)],
  status: 'number',
  statusChangedAt: 'date?',
  managingUserId: 'string?',
  rebootSchedule: 'maxString?',
  audioSinkConfig: [audioSinkConfigSchema],
  audioSourceConfig: [audioSourceConfigSchema],
  audioSinksLatest: [audioSinkSchema],
  audioSinks: [audioSinkSchema],
  audioSourcesLatest: [audioSourceSchema],
  audioSources: [audioSourceSchema],
  audioSinksLocked: 'boolean?',
  audioSourcesLocked: 'boolean?',
  usbCameraConfig: [usbCameraConfigSchema],
  usbCameras: [usbCameraSchema],
  usbCamerasLatest: [usbCameraSchema],
  usbCamerasLocked: 'boolean?',
  byodAccessCode: 'number?',
  dongleAccessCode: 'number?',
  wallpaper: wallpaperCacheSchema,
  displayConfig: [displayConfigSchema],
  displaysLatest: [displaySchema],
  displays: [displaySchema],
  displaysLocked: 'boolean?',
  recorder: {
    enabled: 'boolean',
    ip: 'maxString',
    port: 'maxString',
    password: 'maxString',
  },
  version: 'maxString',
  lockImports: 'number?',
})

module.exports = displayNodeDeviceSchema;
